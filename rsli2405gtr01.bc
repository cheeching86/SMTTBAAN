|******************************************************************************
|* Component	: cisli120011000   VRC B60  a  sy48	(FP6)
|* Name		: Invoices
|* Author	: Jan-Willem Sonderlo
|* Date Written	: 29-12-2009 [16:45]
|******************************************************************************
|
|******************************************************************************
declaration:
#ident "@(#)cisli120011000  ciB60asy76  nlbaudv3  Rev.No. 2  05 Jul 13  bpape"
#ident "@(#)cisli120011000  ciB60asy74  nlbaudv3  Rev.No. 4  16 May 13  rmahesh"
#ident "@(#)cisli120011000  ciB60asy72  nlbaudv3  Rev.No. 6  11 Feb 13  rhaitsma"
#ident "@(#)cisli120011000  ciB60asy67  nlbaudv3  Rev.No. 4  10 Oct 12  rhaitsma"
#ident "@(#)cisli120011000  ciB60asy66  nlbaudv3  Rev.No. 3  17 Sep 12  rhaitsma"
#ident "@(#)cisli120011000  ciB60asy65  nlbaudv3  Rev.No. 2  04 Jul 12  rhaitsma"
#ident "@(#)cisli120011000  ciB60asy63  nlbaudv3  Rev.No. 3  26 Apr 12  rhaitsma"
#ident "@(#)cisli120011000  ciB60asy61  nlbaudv3  Rev.No. 21  14 Mar 12  rhaitsma"
#ident "@(#)cisli120011000  ciB60asy61  nlbaudv1  Rev.No. 10  04 Nov 11  rhaitsma"
#ident "@(#)cisli120011000  ciB60asy59  nlbaudv1  Rev.No. 4  15 Dec 10  rhaitsma"
#ident "@(#)cisli120011000  ciB60asy57  nlbaudv1  Rev.No. 4  21 Sep 10  rhaitsma"
#ident "@(#)cisli120011000  ciB60asy54  nlbaudv1  Rev.No. 5  18 Feb 10  rhaitsma"
#ident "@(#)cisli120011000  ciB60ast6  nlbaudv1  Rev.No. 5  19 Oct 09  rhaitsma"
#ident "@(#)cisli120011000  ciB60asy53  nlbaudv1  Rev.No. 2  23 Sep 09  rhaitsma"
#ident "@(#)cisli120011000  ciB60asy52  nlbaudv1  Rev.No. 5  17 Sep 09  rhaitsma"
#ident "@(#)cisli120011000  ciB60asy51  nlbaudv1  Rev.No. 5  31 Aug 09  rhaitsma"
#ident "@(#)cisli120011000  ciB60asy50  nlbaudv1  Rev.No. 4  22 Jul 09  rhaitsma"
#ident "@(#)cisli120011000  ciB60asy49  nlbaudv1  Rev.No. 2  09 Jun 09  rhaitsma"
#ident "@(#)cisli120011000  ciB60asy48  nlbaudv1  Rev.No. 9  25 May 09  rhaitsma"

	#include <bic_text>
	#include "itccom0000"	|* Multicurrency variables and handling
	#include "itcmcs0012"

	#define monospace					|#800-179186.n
	#define	MAX.NO.DISCOUNTS	11

		table	ttcibd001		|Item-General
		table	ttcibd004		|Item Code by Item Code System
		table	twhinh430		|Shipments
		table	twhinh431		|Shipment Lines
		table	ttdsls406		|Sales Order Actual Delivery Lines
		table	ttdsls400		|Sales Orders
		table	ttccom140
		table	ttdsls401		|Sales Order Lines
		table	ttcemm170		|Companies	
		table	ttcmcs032		|Tax Rate


		domain	tcmcs.long	ii
		domain	tcmcs.long	len.paym
		domain	tcmcs.long	no.disc.lines
		domain	tcmcs.long	remaining.empty.header.lines
	extern	domain	tcmcs.long	r.disc.element

			boolean		repeat.layout
			boolean		get.payment.schedule
		domain	tctax.rndg	tax.rounding.method

		domain	tcmcs.str12	discount.format
		domain	tcmcs.str12	amount.format

		domain	tclang		dummy.language
		domain	tcmcs.long	dummy.long
			string		dummy.string(1)
		domain	tcmcs.s300m	dummy.error.message
		domain	tcqsl1		lot.size	

	|* General
	extern	domain	tcmcs.st35	r.doc.type.string
	extern		boolean		r.end.invoice
|*	extern	domain	tcmcs.str12	r.discount	|* old TCS 800-172163
	extern	domain	tcmcs.str14	r.discount	|* new TCS 800-172163
|	extern	domain	tcamnt		r.goods.net.amnt	|#1061448.o
	extern	domain	tcamnt		r.transport.amount, total.home.amount, home.amount
	extern	domain	tctax.rndg	r.tax.rounding.method
	extern	domain	tcgld.date	invoice.date
	extern	domain	tcbool		r.print.discount.value	|#1504265.n
	extern	domain	tcbool		r.print.discount	|#1398488.sn
	extern	domain	tcbool		r.aggregated.line
	extern	domain	tcpono		r.activity		|#1398488.en
	extern	domain	tcbool		r.hide.price		|#800-192539.n
	

	|* Lots and Serials
		domain	tcmcs.long	lot.serial.element
|	extern	domain	tcmcs.str100	r.lot.serial.string	|#1419676.o
	extern	domain	tcmcs.str100	r.lots.serials(1)		based
	extern	domain	tcqiv1		r.lot.qty(1)			based
								|#1419676.so
|	extern	domain	tcmcs.long	r.no.lots.serials	|#1025761.n
								|#1419676.eo
	|* Tax Summary
|			boolean		tax.by.tax.authority
|			boolean		tax.by.tax.code
|		domain	tcmcs.long	sql.id.tax.authority
|		domain	tcmcs.long	sql.id.tax.code
	extern	domain	tcmcs.ctau	r.tax.authority
	extern	domain	tcdsca		r.tax.authority.desc
	extern	domain	tcfovn		r.tax.authority.exempt
	extern	domain	tcamnt		r.tax.authority.base.am
	extern	domain	tcpvat		r.tax.authority.percent
	extern	domain	tcamnt		r.tax.authority.am
	extern	domain	tcamnt		r.tax.authority.am.hc
	extern	domain	tcmcs.str10	r.jurisdiction.level	|#1001034.n
|	extern	domain	tcamnt		r.tax.authority.am.hc(MAX.CURRENCIES)
			boolean		g.tax.summary
			boolean		g.tax.code.present
			boolean		g.tax.authority.present
		domain	tcmcs.long	g.current.tax.authority.record
		domain	tcmcs.long	g.current.tax.code.record
|		domain	tcccty		g.current.tax.country
|		domain	tccvat		g.current.tax.code
		domain	tcmcs.long	g.no.of.records
		domain	tcmcs.long	g.no.of.tax.codes
		domain	tcmcs.long	g.no.of.home.currencies
		domain	tcmcs.long	i
	extern	domain	tcmcs.ctau	r.ts.tax.authority(1)		based
	extern	domain	tcdsca		r.ts.tax.authority.desc(1)	based
	extern	domain	tcfovn		r.ts.tax.authority.exempt(1)	based
	extern	domain	tcamnt		r.ts.tax.authority.base.am(1)	based
	extern	domain	tcpvat		r.ts.tax.authority.percent(1)	based
	extern	domain	tcamnt		r.ts.tax.authority.am(1)	based
	extern	domain	tcamnt		r.ts.tax.authority.am.hc(1, 1)	based
								|#1001034.sn
	extern	domain	tcmcs.str10	r.ts.juris.level(1)		based
								|#1001034.en
	extern	domain	tcccty		r.ts.tax.country.array(1)	based
	extern	domain	tccvat		r.ts.tax.code.array(1)		based

	|* Payment Schedules
		domain	tcmcs.long	no.paym.sched.lines
		domain	tcgld.date	paym.sched.due.date.local.arr(1)   based
	extern	domain	tcmcs.long	r.paym.sched.element
	extern	domain	tcamnt		r.paym.sched.tot.amount
	extern	domain	tcccur		r.paym.sched.euro
	extern	domain	tcamnt		r.paym.sched.amount.arr(1)	   based
	extern	domain	tcamnt		r.paym.sched.amount.eur.arr(1)	   based
	extern	domain	tcpaym		r.paym.sched.payment.method.arr(1) based
	extern	domain	tcdate		r.paym.sched.due.date.arr(1)	   based

|	|* Delivery Notes
|		domain	tcmcs.long	length.delivery.notes
|		domain	tcmcs.long	pos.of.next.delivery.note
|		domain	tcmcs.str300m	delivery.notes

	|* Service Contract Configurations
			boolean		dummy.bool		|#1451250.sn
		domain	tcmcs.long	configurations.counter	|#1451250.en

	|* Kitting Components
	static		boolean		g.arrays.filled
		domain	tcmcs.long	g.actual.component.line
		domain	tcmcs.long	g.max.no.of.components
		domain	tcshpm		g.component.shipment(1)		based
		domain	tcpono		g.component.shipment.line(1)	based
								|#800-176216.sn
		domain	tcshpm		g.component.receipt(1)		based
		domain	tcpono		g.component.receipt.line(1)	based
								|#800-176216.en
		domain	tcncmp		g.logistic.company(1)		based
		domain	tcitem		g.component(1)			based
		domain	tcqiv1		g.delivered.qty.inv.unit(1)	based
		domain	tcqsl1		g.delivered.qty.order.unit(1)	based
		domain	tccuni		g.order.unit(1)			based
		domain	tcconv		g.conversion.factor(1)		based
		domain	tcdate		g.delivery.date(1)		based
		domain	tccdec		g.terms.of.delivery(1)		based
		domain	tcptpa		g.point.of.title.passage(1)	based
		domain	tcguid		g.lot.and.serial.set(1)		based
		domain	tccrte		g.route(1)			based
		domain	tccfrw		g.carrier.lsp(1)		based
		domain	tctxtn		g.component.text(1)		based
		domain	tctxtn		g.item.text(1)			based
	extern	domain	tcitem		r.component.item
	extern	domain	tcdsca		r.component.item.dsca
	extern	domain	tcqsl1		r.component.ordered.qty
	extern	domain	tcqiv1		r.component.ordered.qty.inv
	extern	domain	tcqsl1		r.component.delivered.qty
	extern	domain	tcqiv1		r.component.delivered.qty.inv
	extern	domain	tccuni		r.component.sales.unit
	extern	domain	tccuni		r.component.inventory.unit
	extern	domain	tcmcs.s100m	r.component.terms.of.delivery.dsca
	extern	domain	tcshpm		r.component.shipment
	extern	domain	tcpono		r.component.shipment.line
	extern	domain	tcshpm		r.component.receipt	|#800-176216.n
	extern	domain	tcpono		r.component.receipt.line|#800-176216.n
	extern	domain	tcdate		r.component.delivery.date
	extern	domain	tccrte		r.component.route
	extern	domain	tcdsca		r.component.route.dsca
	extern	domain	tccfrw		r.component.carrier.lsp
	extern	domain	tcdsca		r.component.carrier.lsp.dsca
	extern	domain	tcmcs.str30	r.component.text.label
	extern	domain	tcmcs.str30	r.item.text.label

	extern	domain	tcmcs.str30	r.210.irdt.label	|#800-179680.n
	extern	domain	tcmcs.str30	r.210.irai.label	|#800-179680.n

	|extern domain	tccom.bpid	bp.code
	extern	domain	tcqsl1		lot.accum, lot.bal

		domain	tcamnt		sales.amount.1
		domain	tcamnt		sales.amount.2
		domain	tcamnt		sales.amount.3
		domain	tcamnt		sales.amount.4
		domain	tcamnt		tax.amount.1
		domain	tcamnt		tax.amount.2
		domain	tcamnt		tax.amount.3
		domain	tcamnt		tax.amount.4
		domain	tcmcs.str10	tax.code.1
		domain	tcmcs.str10	tax.code.2
		domain	tcmcs.str10	tax.code.3
		domain	tcmcs.str10	tax.code.4
		domain	tcpvat		tax.rate.0
		domain	tcpvat		tax.rate.1
		domain	tcpvat		tax.rate.2
		domain	tcpvat		tax.rate.3
		domain	tcpvat		tax.rate.4
		domain	tcmcs.str50	rmk.txt.1
		domain	tcmcs.str50	rmk.txt.2

		domain	tcmcs.str50	rmk.txt.4|test
		domain	tcmcs.str100	tni.txt.1
		domain	tcmcs.long line
		domain	tcmcs.long item.count,item.count2
		domain	tcmcs.str40	hs.ldsc
		string		tnc.txt(130,11)



	#define TEXT.HANDLING	{validate.textline()}

before.program:
	e = rdi.domain(	"tcdisc",
			discount.format,
			dummy.string,
			dummy.string,
			dummy.long,
		   	dummy.string,
		   	dummy.long)

	e = rdi.domain(	"tcamnt",
			amount.format,
			dummy.string,
			dummy.string,
			dummy.long,
		  	dummy.string,
		  	dummy.long)

	e = rdi.domain.string(
			domainof(r.paym.sched.payment.method.arr),
			len.paym,
			dummy.long)

	r.slash = "/"						|#800-184626.n

	sales.amount.1 = 0
	sales.amount.2 = 0
	sales.amount.3 = 0
	sales.amount.4 = 0
	tax.amount.1 = 0
	tax.amount.2 = 0
	tax.amount.3 = 0
	tax.amount.4 = 0
	tax.code.1 = ""
	tax.code.2 = ""
	tax.code.3 = ""
	tax.code.4 = ""
	tax.rate.1 = 0.0
	tax.rate.2 = 0.0
	tax.rate.3 = 0.0
	tax.rate.4 = 0.0
	rmk.txt.1 = ""
	rmk.txt.2 = ""
rmk.txt.4 = ""
tni.txt.1 = "1. All cheque should be crossed and make payable to Genitronic (Malaysia) Sdn. Bhd."


|******************************************************************************
|* BEFORE LAYOUTS
|******************************************************************************

before.r.copy.nr.51:					|* Invoice Header
before.layout:

	lattr.pageno = 1
	remaining.empty.header.lines = r.no.empty.hdlin
	r.transport.amount = 0.0
	r.paym.sched.tot.amount = 0.0
	r.end.invoice = false

	invoice.date = get.report.invoice.date(
					r.invoice.comp,
					r.print.option,
|					r.billing.req.id,	|#1061448.o
					r.billing.request,	|#1061448.n
					r.ih.idat)

	select tdsls400.orno, tdsls400.ofcn
	from tdsls400
	where tdsls400.orno = :r.order.nr
	selectdo
		select tccom140.ccnt, tccom140.telp, tccom140.tefx
		from tccom140
		where tccom140.ccnt = :tdsls400.ofcn
		selectdo
		endselect
	endselect
item.count = 0
	select whinh431.shpm
	from whinh431
	where whinh431.shpm = :r.shipment.id
	selectdo
		item.count = item.count +1
	endselect


|message(str.substring$(r.top.desc, 15, 15))

before.r.copy.nr.52:
before.layout:
	login.id = logname$

	if strip$(r.h.cust.ord) = "" then
		select whinh430.trnr
		from whinh430
		where whinh430._index1 = {:r.shipment.id}
		selectdo
			r.h.cust.ord = whinh430.trnr
		selectempty
			r.h.cust.ord = ""
		endselect
	endif
	
	|initialize.invoice.line.data()				|#243517.en



|******************************************************************************
|* DETAIL LAYOUTS
|******************************************************************************

detail.1:							|#243517.sn
before.layout:
	initialize.invoice.line.data()				|#243517.en

	if tax.code.1 = "" then
		tax.code.1 = strip$(r.tax.code)

		select tcmcs032.ccty, tcmcs032.cvat, tcmcs032.edat, tcmcs032.pvat
		from tcmcs032
		where tcmcs032._index1 = {"MYS", :tax.code.1}
		and tcmcs032.edat <= :r.ih.idat
		order by tcmcs032.ccty, tcmcs032.cvat, tcmcs032.edat
		selectdo
			tax.rate.1 = tcmcs032.pvat
		selectempty
			tax.rate.1 = 99.99
		endselect

		sales.amount.1 = sales.amount.1 + r.amount
		tax.amount.1 = tax.amount.1 + r.tax.amount
		tax.rate.0 = tax.rate.1
	else
		if tax.code.1 = strip$(r.tax.code) then
			sales.amount.1 = sales.amount.1 + r.amount
			tax.amount.1 = tax.amount.1 + r.tax.amount
			tax.rate.0 = tax.rate.1
		else
			if tax.code.2 = "" then
				tax.code.2 = strip$(r.tax.code)
	
				select tcmcs032.ccty, tcmcs032.cvat, tcmcs032.edat, tcmcs032.pvat
				from tcmcs032
				where tcmcs032._index1 = {"MYS", :tax.code.2}
				and tcmcs032.edat <= :r.ih.idat
				order by tcmcs032.ccty, tcmcs032.cvat, tcmcs032.edat
				selectdo
					tax.rate.2 = tcmcs032.pvat
				selectempty
					tax.rate.2 = 99.99
				endselect

				sales.amount.2 = sales.amount.2 + r.amount
				tax.amount.2 = tax.amount.2 + r.tax.amount
				tax.rate.0 = tax.rate.2
			else
				if tax.code.2 = strip$(r.tax.code) then
					sales.amount.2 = sales.amount.2 + r.amount
					tax.amount.2 = tax.amount.2 + r.tax.amount
					tax.rate.0 = tax.rate.2
				else
					if tax.code.3 = "" then
						tax.code.3 = strip$(r.tax.code)

						select tcmcs032.ccty, tcmcs032.cvat, tcmcs032.edat, tcmcs032.pvat
						from tcmcs032
						where tcmcs032._index1 = {"MYS", :tax.code.3}
						and tcmcs032.edat <= :r.ih.idat
						order by tcmcs032.ccty, tcmcs032.cvat, tcmcs032.edat
						selectdo
							tax.rate.3 = tcmcs032.pvat
						selectempty
							tax.rate.3 = 99.99
						endselect

						sales.amount.3 = sales.amount.3 + r.amount
						tax.amount.3 = tax.amount.3 + r.tax.amount
						tax.rate.0 = tax.rate.3
					else
						if tax.code.3 = strip$(r.tax.code) then
							sales.amount.3 = sales.amount.3 + r.amount
							tax.amount.3 = tax.amount.3 + r.tax.amount
							tax.rate.0 = tax.rate.3
						else
							if tax.code.4 = "" then
								tax.code.4 = strip$(r.tax.code)

								select tcmcs032.ccty, tcmcs032.cvat, tcmcs032.edat, tcmcs032.pvat
								from tcmcs032
								where tcmcs032._index1 = {"MYS", :tax.code.4}
								and tcmcs032.edat <= :r.ih.idat
								order by tcmcs032.ccty, tcmcs032.cvat, tcmcs032.edat
								selectdo
									tax.rate.4 = tcmcs032.pvat
								selectempty
									tax.rate.4 = 99.99
								endselect

								sales.amount.4 = sales.amount.4 + r.amount
								tax.amount.4 = tax.amount.4 + r.tax.amount
								tax.rate.0 = tax.rate.4
							else
								if tax.code.4 = strip$(r.tax.code) then
									sales.amount.4 = sales.amount.4 + r.amount
									tax.amount.4 = tax.amount.4 + r.tax.amount
									tax.rate.0 = tax.rate.4
								endif
							endif
						endif
					endif
				endif
			endif
		endif
	endif

	if strip$(r.tax.code) = "RS" then
		rmk.txt.1 = "Remarks: RS: Relief Supplies under GST"
		rmk.txt.2 = "         GST is relieved under s.56(3)(b)GSTA"
	endif



detail.33:							
before.layout:
	

		select tcibd001.item, tcibd001.dsca, tcibd001.txta
		from tcibd001
		where tcibd001.item = :r.item.str(1;47)
		selectdo
			
		endselect

	select tcibd004.citt, tcibd004.bpid, tcibd004.item, tcibd004.aitc
	from tcibd004
	where tcibd004.bpid = :r.ih.itbp and tcibd004.item = :r.item.str(1;47)
		and tcibd004.citt = "BPN"
	selectdo

	endselect	


	select whinh431.shpm
	from whinh431
	where whinh431.shpm = :r.shipment.id
	selectdo
	endselect


|divResult = item.count / 5          
|item.count2 = floor(7/5)     
|product = intDivResult * 5          
|remainder = item.count - product    

	|if item.count = 1 then
	|	rmk.txt.4 = "1"
	|endif
	|if item.count = 2 then
	|	rmk.txt.4 = "2"



detail.34:							
before.layout:

	|if line = 1 then
		select tcibd001.item, tcibd001.dsca, tcibd001.txta
		from tcibd001
		where tcibd001.item = :r.item.str(1;47)
		selectdo
		endselect
	
	|get.max.pono.print()
	|endif
detail.35:							
before.layout:
	select tcibd004.citt, tcibd004.bpid, tcibd004.item, tcibd004.aitc
	from tcibd004
	where tcibd004.bpid = :r.ih.itbp and tcibd004.item = :r.item.str(1;47)
		and tcibd004.citt = "BPN"
	selectdo
	endselect	

	|item.count = 0


	select whinh431.shpm
	from whinh431
	where whinh431.shpm = :r.shipment.id
	selectdo
		|item.count = item.count +1
	endselect
|message(str$(item.count))

	|if item.count = 1 then
	|	rmk.txt.4 = "1"
	|endif
	|if item.count = 2 then
	|	rmk.txt.4 = "2"
	|endif

detail.36:							
before.layout:
	select whinh431.shpm, whinh431.pono, whinh431.refe
	from whinh431
	where whinh431.shpm = :r.shipment.id and whinh431.pono = :r.shipment.line
	selectdo
	endselect

	|select whinh430.shpm, whinh430.text
	|from whinh430
	|where whinh430.shpm = :r.shipment.id
	|selectdo
	|endselect

	select whinh430.shpm, whinh430.text
	from whinh430
	where whinh430.shpm = :r.shipment.id
	selectdo
	endselect

detail.38:							
before.layout:
	select whinh431.shpm, whinh431.pono, whinh431.grwt
	from whinh431
	where whinh431.shpm = :r.shipment.id and whinh431.pono = :r.shipment.line
	selectdo
	endselect

	select whinh430.shpm, whinh430.refs
	from whinh430
	where whinh430.shpm = :r.shipment.id
	selectdo
	endselect




|******************************************************************************
|* AFTER LAYOUTS
|******************************************************************************



after.r.copy.nr.72:			|* Payment Schedule by Document
before.layout:
	if get.payment.schedule then
		if not isspace(r.ih.terms.of.pay) and
|		   r.document.type <> cisli.doct.credit and	|#FIN-083.o
		   not r.source.type = cisli.srtp.debit.credit and
		   not IS.ZERO(r.ih.am) then
			if not cisli.dll0063.get.due.date.and.due.amnt(
					r.ih.fin.comp,
					r.ih.itbp,
					r.ih.pbbp,
					r.ih.terms.of.pay,
					r.ih.paym,		|#1039380.n
					r.ih.ccur,
					r.ih.am,
					0.0,		|* VAT Amount
					r.ih.idat,
					no.paym.sched.lines,
					r.paym.sched.amount.arr,
					paym.sched.due.date.local.arr,
					r.paym.sched.payment.method.arr,
					dummy.error.message) then
				return
			endif

			if no.paym.sched.lines = 0 then
				no.paym.sched.lines = 1
								|#1472358.so
|				r.paym.sched.payment.method.arr(1,1) = r.ih.paym
								|#1472358.eo
			endif

			alloc.mem(r.paym.sched.due.date.arr,
				  no.paym.sched.lines)

			for ii = 1 to no.paym.sched.lines
				local.to.utc(
					paym.sched.due.date.local.arr(ii),
					time.num(),
					r.paym.sched.due.date.arr(ii))
			endfor
		else
			no.paym.sched.lines = 1
			alloc.mem(r.paym.sched.due.date.arr, 1)
			alloc.mem(r.paym.sched.amount.arr, 1)
			alloc.mem(r.paym.sched.payment.method.arr, len.paym, 1)
			r.paym.sched.due.date.arr(1) = r.due.date
			r.paym.sched.amount.arr(1) = r.ih.am
			r.paym.sched.payment.method.arr(1,1) = r.ih.paym
		endif

		r.paym.sched.tot.amount = 0.0

		alloc.mem(r.paym.sched.amount.eur.arr, no.paym.sched.lines)
		for ii = 1 to no.paym.sched.lines
			r.paym.sched.tot.amount = r.paym.sched.tot.amount +
						  r.paym.sched.amount.arr(ii)

			if r.print.euro = tcyesno.yes then
				convert.amount.to.euro(
					r.ih.fin.comp,
					r.ih.ccur,
					r.paym.sched.amount.arr(ii),
					r.ih.idat,
					r.ih.rate.type,
					r.paym.sched.euro,
					r.paym.sched.amount.eur.arr(ii))
			else
				e = set.mem(r.paym.sched.amount.eur.arr, 0.0)
			endif
		endfor

		get.payment.schedule = false
		r.paym.sched.element = 1
	endif

	if r.paym.sched.element > no.paym.sched.lines then
		lattr.print = false
	endif

after.layout:
	if r.paym.sched.element <= no.paym.sched.lines then
		r.paym.sched.element = r.paym.sched.element + 1
		layout.again()
	else
		free.mem(paym.sched.due.date.local.arr)
		free.mem(r.paym.sched.amount.arr)
		free.mem(r.paym.sched.payment.method.arr)
		free.mem(r.paym.sched.due.date.arr)
	endif

after.r.copy.nr.74:
before.layout:
	home.amount = round(r.goods.net.amnt * cisli305.rate(1),2,1)
	total.home.amount = cisli305.amth(1) + cisli305.txah(1)
	skip.to(spool.pg.length - 25)
tnc.txt(1,1) = "1. All cheque should be crossed and make payable to Genitronic (Malaysia) Sdn. Bhd."
tnc.txt(1,2) = "2. Title of above goods shall remain with Genitronic (Malaysia) Sdn. Bhd.. We reserve the right to repossess the goods without"
tnc.txt(1,3) = "notice unless and until full payments. You can bank in to Hong Leong Bank Berhad 29600060513 (MYR) or 29602000519 (USD). "
tnc.txt(1,4) = "Bank Address: 225, Jalan Lagenda 10, Lagenda Heights, 08000 Sungai Petani, Kedah, Malaysia. SWIFT Code: HLBBMYKL"
tnc.txt(1,5) = "3. Interest rate of 1.5% per month will be charged from due date of all invoice/debit notes until full payment are made."
tnc.txt(1,6) = "4. Any date or time for delivery quoted by the seller is only an estimation and the seller shall not be liable for the "
tnc.txt(1,7) = "consequence of any delay from the estimated date."
tnc.txt(1,8) = "5. Kindly forward the payment receipt to treasury@genitronic-my.com"
tnc.txt(1,9) = "6. Received the above goods in good order and conditions. In case of discrepancies, please notify us within seven days, "
tnc.txt(1,10) = "otherwise the goods will be considered as received in good order and conditions	"

after.r.copy.nr.75:
before.layout:
	home.amount = round(r.goods.net.amnt * cisli305.rate(1),2,1)
	total.home.amount = cisli305.amth(1) + cisli305.txah(1)
	skip.to(spool.pg.length - 25)
tnc.txt(1,1) = "1. All cheque should be crossed and make payable to Genitronic (Malaysia) Sdn. Bhd."
tnc.txt(1,2) = "2. Title of above goods shall remain with Genitronic (Malaysia) Sdn. Bhd.. We reserve the right to repossess the goods without"
tnc.txt(1,3) = "notice unless and until full payments. You can bank in to Hong Leong Bank Berhad 29600060513 (MYR) or 29602000519 (USD). "
tnc.txt(1,4) = "Bank Address: 225, Jalan Lagenda 10, Lagenda Heights, 08000 Sungai Petani, Kedah, Malaysia. SWIFT Code: HLBBMYKL"
tnc.txt(1,5) = "3. Interest rate of 1.5% per month will be charged from due date of all invoice/debit notes until full payment are made."
tnc.txt(1,6) = "4. Any date or time for delivery quoted by the seller is only an estimation and the seller shall not be liable for the "
tnc.txt(1,7) = "consequence of any delay from the estimated date."
tnc.txt(1,8) = "5. Kindly forward the payment receipt to treasury@genitronic-my.com"
tnc.txt(1,9) = "6. Received the above goods in good order and conditions. In case of discrepancies, please notify us within seven days, "
tnc.txt(1,10) = "otherwise the goods will be considered as received in good order and conditions.	"
tnc.txt(1,11) = "This is Computer generated document, no signature is required."

after.layout:
	sales.amount.1 = 0
	sales.amount.2 = 0
	sales.amount.3 = 0
	sales.amount.4 = 0
	tax.amount.1 = 0
	tax.amount.2 = 0
	tax.amount.3 = 0
	tax.amount.4 = 0
	tax.code.1 = ""
	tax.code.2 = ""
	tax.code.3 = ""
	tax.code.4 = ""
	tax.rate.1 = 0.0
	tax.rate.2 = 0.0
	tax.rate.3 = 0.0
	tax.rate.4 = 0.0
	rmk.txt.1 = ""
	rmk.txt.2 = ""	

|******************************************************************************
|* TEXTS
|******************************************************************************

field.r.header.text:
before.print:
	TEXT.HANDLING

field.r.add.text:
before.print:
	TEXT.HANDLING

field.r.footer.text:
before.print:
	TEXT.HANDLING

field.r.detail.text:
before.print:
	TEXT.HANDLING

field.r.line.text1:
before.print:
	TEXT.HANDLING

field.r.line.text2:
before.print:
	TEXT.HANDLING

field.r.comp.text:
before.print:
	TEXT.HANDLING

field.r.comp.item.text:
before.print:
	TEXT.HANDLING

field.r.rebate.agr.txt:
before.print:
	TEXT.HANDLING

field.r.srv.item.text:						|#1468471.sn
before.print:
	TEXT.HANDLING

field.r.tax.text:
before.print:
	TEXT.HANDLING

field.r.tod.text:
before.print:
	TEXT.HANDLING

field.r.top.text:
before.print:
	TEXT.HANDLING						|#1468471.en

after.program:
	free.mem(r.lots.serials)
	free.mem(r.lot.qty)

functions:


function validate.textline()

{
	|* Skip printing of internal text.
	|* Internal text is text with on the first position the '<' sign.
	|* External text is text with on the first position the '>' sign.

	if ( lattr.prline(1;1) = ">" ) then
		lattr.prline = lattr.prline(2)
	else
		if ( lattr.prline(1;1) = "<" ) then
			lattr.print = false
		endif
	endif
}

function void initialize.tax.summary.data()
{
		domain	tcmcs.long	array.index
		domain	tcmcs.long	tax.authority.length
		domain	tcmcs.long	description.length
		domain	tcmcs.long	exempt.certificate.length
		domain	tcmcs.long	jurisdiction.length	|#1001034.n
		domain	tcmcs.long	tax.country.length
		domain	tcmcs.long	tax.code.length

		domain	tcmcs.long	dummy.ret

	array.index = 0
	tax.authority.length = 0
	description.length = 0
	exempt.certificate.length = 0
	tax.country.length = 0
	tax.code.length = 0

	import("r.ts.tax.summary", g.tax.summary)
	import("r.ts.present", g.tax.code.present)
	import("r.ts.tax.country.length", tax.country.length)
	import("r.ts.tax.code.length", tax.code.length)
	import("r.ts.no.home.currencies", g.no.of.home.currencies)
	import("r.ts.array.index", array.index)
	import("r.ts.no.tax.codes", g.no.of.tax.codes)
	import("r.ts.tax.authority.length", tax.authority.length)
	import("r.ts.description.length", description.length)
	import("r.ts.exempt.certificate.length", exempt.certificate.length)
	import("r.ts.jurisdiction.length", jurisdiction.length)	|#1001034.n

	if array.index > 0 then
		dummy.ret = alloc.mem(	r.ts.tax.country.array,
					tax.country.length,
					array.index)
		dummy.ret = alloc.mem(	r.ts.tax.code.array,
					tax.code.length,
					array.index)
		dummy.ret = alloc.mem(	r.ts.tax.authority,
					tax.authority.length,
					array.index)
		dummy.ret = alloc.mem(	r.ts.tax.authority.desc,
					description.length,
					array.index)
		dummy.ret = alloc.mem(	r.ts.tax.authority.exempt,
					exempt.certificate.length,
					array.index)
		dummy.ret = alloc.mem(	r.ts.tax.authority.base.am,
					array.index)
		dummy.ret = alloc.mem(	r.ts.tax.authority.percent,
					array.index)
		dummy.ret = alloc.mem(	r.ts.tax.authority.am,
					array.index)
		dummy.ret = alloc.mem(	r.ts.tax.authority.am.hc,
					array.index,
					g.no.of.home.currencies)
		dummy.ret = alloc.mem(	r.ts.juris.level,	|#1001034.sn
					jurisdiction.length,
					array.index)		|#1001034.en
		import("r.ts.tax.country.array", r.ts.tax.country.array)
		import("r.ts.tax.code.array", r.ts.tax.code.array)
		import("r.ts.tax.authority", r.ts.tax.authority)
		import("r.ts.tax.authority.desc", r.ts.tax.authority.desc)
		import("r.ts.tax.authority.exempt", r.ts.tax.authority.exempt)
		import("r.ts.tax.authority.base.am", r.ts.tax.authority.base.am)
		import("r.ts.tax.authority.percent", r.ts.tax.authority.percent)
		import("r.ts.tax.authority.am", r.ts.tax.authority.am)
		import("r.ts.tax.authority.am.hc", r.ts.tax.authority.am.hc)
		import("r.ts.juris.level", r.ts.juris.level)	|#1001034.n
	endif

	g.current.tax.authority.record = 1
	g.current.tax.code.record = 1
	g.no.of.records = array.index
}

function void closing.tax.summary.data()
{
	free.mem(r.ts.tax.country.array)
	free.mem(r.ts.tax.code.array)
	free.mem(r.ts.tax.authority)
	free.mem(r.ts.tax.authority.desc)
	free.mem(r.ts.tax.authority.exempt)
	free.mem(r.ts.tax.authority.base.am)
	free.mem(r.ts.tax.authority.percent)
	free.mem(r.ts.tax.authority.am)
	free.mem(r.ts.tax.authority.am.hc)
	free.mem(r.ts.juris.level)				|#1001034.n
}

function void initialize.invoice.line.data()
{
	no.disc.lines = 0
	lot.serial.element = 1
	r.disc.element = 2
	no.paym.sched.lines = 0
	get.payment.schedule = true
	g.arrays.filled = false
	g.actual.component.line = 0
	g.max.no.of.components = 0
	configurations.counter = 1				|#1451250.n
	r.discount = ""						|#247593.n
								|#1419676.so
|	r.no.lots.serials = 0					|#1025761.sn
|	import("r.no.lots.serials", r.no.lots.serials)		|#1025761.en
								|#1419676.eo

	if r.no.lots.serials > 0 then
		alloc.mem(r.lots.serials, 100, r.no.lots.serials)
		alloc.mem(r.lot.qty, r.no.lots.serials)
		import("r.lots.serials", r.lots.serials)
		import("r.lot.qty", r.lot.qty)
	endif
}

|function void handle.sales.order.invoice.component.lines(
|		domain	tcncmp		i.source.logistic.company,
|		domain	cisli.ortp	i.order.type,
|		domain	tckoor		i.kind.of.order,
|		domain	tcorno		i.sales.order,
|		domain	tcwset		i.order.set,
|		domain	tcpono		i.line.number,
|		domain	tcpono		i.invoice.line,
|		domain	tcshpm		i.shipment)
								|#800-191132.so
|function void handle.sales.order.invoice.component.lines(
|		domain	tcncmp		i.financial.company,
|		domain	tctran		i.transaction.type,
|		domain	tcgld.docn	i.invoice.number,
|		domain	tciseq		i.invoice.line)
								|#800-191132.eo
								|#800-191132.sn
function void handle.sales.order.invoice.component.lines(
		domain	tcncmp		i.logistic.company,
		domain	cisli.ortp	i.order.type,
		domain	tckoor		i.kind.of.order,
		domain	tcorno		i.order.number,
		domain	tcwset		i.order.set,
		domain	tcpono		i.order.line,
		domain	tcpono		i.order.sequence,
		domain	tcshpm		i.shipment)
								|#800-191132.en
{
		domain	tcmcs.long	length.of.component.shipment
		domain	tcmcs.long	length.of.component
		domain	tcmcs.long	length.of.order.unit
		domain	tcmcs.long	length.of.terms.of.delivery
		domain	tcmcs.long	length.of.point.of.title.passage
		domain	tcmcs.long	length.of.lot.and.serial.set
		domain	tcmcs.long	length.of.route
		domain	tcmcs.long	length.of.carrier.lsp
		
								|#800-191132.sn
		domain	tcncmp		financial.company
		domain	tctran		transaction.type
		domain	tcgld.docn	invoice.number
		domain	tciseq		invoice.line
								
								
	e = cisli.dll0310.get.invoice.line.from.sales.order.data(
					i.logistic.company,
					i.order.type,
					i.kind.of.order,
					i.order.number,
					i.order.set,
					i.order.line,
					i.order.sequence,
					i.shipment,
					financial.company,
					transaction.type,
					invoice.number,
					invoice.line)
								|#800-191132.en

	if not g.arrays.filled then
|		cisli.dll0247.count.component.lines.of.sales.invoice.line(
|					i.source.logistic.company,
|					i.order.type,
|					i.kind.of.order,
|					i.sales.order,
|					i.order.set,
|					i.line.number,
|					i.invoice.line,
|					i.shipment,
|					false,		|* Do not force count.
|					g.max.no.of.components)
		cisli.dll0312.invoice.line.satellite.count.component.lines(
								|#800-191132.so
|					i.financial.company,
|					i.transaction.type,
|					i.invoice.number,
|					i.invoice.line,
								|#800-191132.eo
								|#800-191132.sn
					financial.company,
					transaction.type,
					invoice.number,
					invoice.line,
								|#800-191132.en
					false,		|* Do not force count.
					g.max.no.of.components)
								|#800-191132.sn
		if g.max.no.of.components = 0 then
			|* No component lines to print
			return
		endif
								|#800-191132.en
		dummy.long = rdi.domain.string(
					"tcshpm",
					length.of.component.shipment,
					dummy.long)
		dummy.long = rdi.domain.string(
					"tcitem",
					length.of.component,
					dummy.long)
		dummy.long = rdi.domain.string(
					"tccuni",
					length.of.order.unit,
					dummy.long)
		dummy.long = rdi.domain.string(
					"tccdec",
					length.of.terms.of.delivery,
					dummy.long)
		dummy.long = rdi.domain.string(
					"tcptpa",
					length.of.point.of.title.passage,
					dummy.long)
		dummy.long = rdi.domain.string(
					"tcguid",
					length.of.lot.and.serial.set,
					dummy.long)
		dummy.long = rdi.domain.string(
					"tccrte",
					length.of.route,
					dummy.long)
		dummy.long = rdi.domain.string(
					"tccfrw",
					length.of.carrier.lsp,
					dummy.long)
		alloc.mem(		g.component.shipment,
					length.of.component.shipment,
					g.max.no.of.components)
		alloc.mem(		g.component.shipment.line,
					g.max.no.of.components)
		alloc.mem(		g.component.receipt,	|#800-176216.sn
					length.of.component.shipment,
					g.max.no.of.components)
		alloc.mem(		g.component.receipt.line,
					g.max.no.of.components)	|#800-176216.en
		alloc.mem(		g.logistic.company,
					g.max.no.of.components)
		alloc.mem(		g.component,
					length.of.component,
					g.max.no.of.components)
		alloc.mem(		g.delivered.qty.inv.unit,
					g.max.no.of.components)
		alloc.mem(		g.delivered.qty.order.unit,
					g.max.no.of.components)
		alloc.mem(		g.order.unit,
					length.of.order.unit,
					g.max.no.of.components)
		alloc.mem(		g.conversion.factor,
					g.max.no.of.components)
		alloc.mem(		g.delivery.date,
					g.max.no.of.components)
		alloc.mem(		g.terms.of.delivery,
					length.of.terms.of.delivery,
					g.max.no.of.components)
		alloc.mem(		g.point.of.title.passage,
					length.of.point.of.title.passage,
					g.max.no.of.components)
		alloc.mem(		g.lot.and.serial.set,
					length.of.lot.and.serial.set,
					g.max.no.of.components)
		alloc.mem(		g.route,
					length.of.route,
					g.max.no.of.components)
		alloc.mem(		g.carrier.lsp,
					length.of.carrier.lsp,
					g.max.no.of.components)
		alloc.mem(		g.component.text,
					g.max.no.of.components)
		alloc.mem(		g.item.text,
					g.max.no.of.components)

|		cisli.dll0247.sales.order.invoice.component.line.get.array(
|					i.source.logistic.company,
|					i.order.type,
|					i.kind.of.order,
|					i.sales.order,
|					i.order.set,
|					i.line.number,
|					i.invoice.line,
|					i.shipment,
		cisli.dll0312.invoice.line.satellite.get.component.lines(
								|#800-191132.so
|					i.financial.company,
|					i.transaction.type,
|					i.invoice.number,
|					i.invoice.line,
								|#800-191132.eo
								|#800-191132.sn
					financial.company,
					transaction.type,
					invoice.number,
					invoice.line,
								|#800-191132.en
					g.component.shipment,
					g.component.shipment.line,
					g.component.receipt,	|#800-176216.sn
					g.component.receipt.line,
								|#800-176216.en
					g.logistic.company,
					g.component,
					g.delivered.qty.inv.unit,
					g.delivered.qty.order.unit,
					g.order.unit,
					g.conversion.factor,
					g.delivery.date,
					g.terms.of.delivery,
					g.point.of.title.passage,
					g.lot.and.serial.set,
					g.route,
					g.carrier.lsp,
					g.component.text,
					g.item.text)
		g.arrays.filled = true
	endif

	inc(g.actual.component.line)
	fill.report.fields.for.printing.kitting.components(
|			i.source.logistic.company,
			g.component.shipment(1, g.actual.component.line),
			g.component.shipment.line(g.actual.component.line),
								|#800-176216.sn
			g.component.receipt(1, g.actual.component.line),
			g.component.receipt.line(g.actual.component.line),
								|#800-176216.en
			g.logistic.company(g.actual.component.line),
			g.component(1, g.actual.component.line),
			g.delivered.qty.inv.unit(g.actual.component.line),
			g.delivered.qty.order.unit(g.actual.component.line),
			g.order.unit(1, g.actual.component.line),
			g.conversion.factor(g.actual.component.line),
			g.delivery.date(g.actual.component.line),
			g.terms.of.delivery(1, g.actual.component.line),
			g.point.of.title.passage(1, g.actual.component.line),
			g.lot.and.serial.set(1, g.actual.component.line),
			g.route(1, g.actual.component.line),
			g.carrier.lsp(1, g.actual.component.line),
			g.component.text(g.actual.component.line),
			g.item.text(g.actual.component.line))
}

function boolean print.sales.order.invoice.component.lines(
		domain	tcyesno		i.kit.handling,
			boolean		i.print.components.of.kit,
		domain	tcqsl1		i.delivered.quantity)
{
	|* Components must be printed if:
	|* - the setting of 'Print Components of Kit' is checked in the billing
	|*   request addition.
	|* - the delivered quantity is zero.
	|*
	|* Note: if the delivered quantity is zero, then the setting of 'Print
	|* Components of Kit' is ignored.

	if i.kit.handling = tcyesno.no then
		|* Sales Order Invoice Line does not have component lines in
		|* cisli247 (Sales Order Invoice Component Lines).
		return(false)
	endif

	if not i.print.components.of.kit and
	   NOT.ZERO(i.delivered.quantity) then
		return(false)
	endif

	return(true)
}

function void fill.report.fields.for.printing.kitting.components(
|		domain	tcncmp		i.source.logistic.company,
		domain	tcshpm		i.component.shipment,
		domain	tcpono		i.component.shipment.line,
		domain	tcshpm		i.component.receipt,	|#800-176216.sn
		domain	tcpono		i.component.receipt.line,
								|#800-176216.en
		domain	tcncmp		i.logistic.company,
		domain	tcitem		i.item,
		domain	tcqsl1		i.delivered.qty.inventory.unit,
		domain	tcqsl1		i.ordered.qty.sales.unit,
		domain	tccuni		i.sales.unit,
		domain	tcconv		i.conversion.factor,
		domain	tcdate		i.delivery.date,
		domain	tccdec		i.terms.of.delivery,
		domain	tcptpa		i.point.of.title.passage,
		domain	tcguid		i.lot.and.serial.set,
		domain	tccrte		i.route,
		domain	tccfrw		i.carrier.lsp,
		domain	tctxtn		i.component.text,
		domain	tctxtn		i.item.text)
{
		domain	tcdsca		item.description
		domain	tcdsca		route.description
		domain	tcdsca		carrier.lsp.description
		domain	tccuni		inventory.unit

			boolean		dummy.terms.of.del.desc.extended
		domain	tctxtn		dummy.terms.of.del.text
			long		dummy.long

	item.description = ""
	inventory.unit = ""

	r.component.item = i.item
	ciint.dlltcibd.get.item.description(
					i.logistic.company,
					i.item,
					item.description)
	r.component.item.dsca = item.description
	r.component.ordered.qty = i.ordered.qty.sales.unit
	r.component.delivered.qty = i.delivered.qty.inventory.unit
	r.component.sales.unit = i.sales.unit
	if NOT.ZERO(i.conversion.factor) then
		r.component.ordered.qty.inv = i.ordered.qty.sales.unit *
					      i.conversion.factor
		r.component.delivered.qty.inv = i.delivered.qty.inventory.unit *
						i.conversion.factor
	else
		r.component.ordered.qty.inv = i.ordered.qty.sales.unit
		r.component.delivered.qty.inv = i.delivered.qty.inventory.unit
	endif
	ciint.dlltcibd.get.item.inventory.unit(
					i.logistic.company,
					i.item,
					inventory.unit)
	r.component.inventory.unit = inventory.unit

	if cisli.dll1200.get.terms.of.delivery.data(
					i.terms.of.delivery,
					i.point.of.title.passage,
					r.ship.from.cadr,
					r.ship.to.cadr,
					lattr.language$,
					dummy.terms.of.del.desc.extended,
					r.component.terms.of.delivery.dsca,
					dummy.terms.of.del.text) then
		r.component.terms.of.delivery.dsca = ""
	endif

	r.component.shipment = i.component.shipment
	r.component.shipment.line = i.component.shipment.line
	r.component.receipt = i.component.receipt		|#800-176216.n
	r.component.receipt.line = i.component.receipt.line	|#800-176216.n
	r.component.delivery.date = i.delivery.date
	r.component.route = i.route
	ciint.dlltcmcs.read.route.description(
					i.route,
					route.description)
	r.component.route.dsca = route.description
	r.component.carrier.lsp = i.carrier.lsp
	dummy.long = ciint.dlltcmcs.get.description.of.carrier(
					i.carrier.lsp,
					carrier.lsp.description)
	r.component.carrier.lsp.dsca = carrier.lsp.description
	if i.component.text then
		r.comp.text = i.component.text
		r.component.text.label = tt.field.desc("cisli312.txta")
	else
		r.comp.text = 0
		r.component.text.label = ""
	endif
	if i.item.text then
		r.comp.item.text = i.item.text
		r.item.text.label = tt.field.desc("cisli312.txtb")
	else
		r.comp.item.text = 0
		r.item.text.label = ""
	endif
}

function void convert.amount.to.euro(
		domain	tcncmp		i.company,
		domain	tcccur		i.invoice.currency,
		domain	tcamnt		i.invoice.amount,
		domain	tcdate		i.rate.date,
		domain	tcrtyp		i.exchange.rate.type,
	ref	domain	tcccur		o.euro.ccur,
	ref	domain	tfgld.amnt	o.euro.amount)
{
	|* translate EMU currency amount to Euros
	o.euro.amount = 0
	o.euro.ccur = ""

	e = ciint.dlltfcmg.translate.emu.amount.into.euro.ext(
					i.company,
					i.invoice.currency,
					i.invoice.amount,
					i.rate.date,
					i.exchange.rate.type,
					o.euro.ccur,
					o.euro.amount)
}

function domain	tcgld.date get.report.invoice.date(
		domain	tcncmp		i.invoice.company,
		domain	cisli.prno	i.print.option,
|		domain	cisli.brid	i.billing.request,	|#fd49686.o
		domain	tcorno		i.billing.request,	|#fd49686.n
		domain	tcdate		i.invoice.date.utc)

{
		domain	tcgld.date	report.invoice.date
		domain	cisli.user	original.user
		domain	tctimz		current.time.zone
		domain	tctimz		original.time.zone
		domain	tcmcs.long	dummy.time

	if i.print.option = cisli.prno.reprint then
		e = get.time.zone(current.time.zone)
		select	cisli200.user:original.user
		from	cisli200
		where	cisli200._index1 = {	:i.invoice.company,
						:i.billing.request}
		as set with 1 rows
		selectdo
			select	ttams110.tzon:original.time.zone
			from	ttaad200, ttams110
	 		where	ttaad200.user = :original.user
	 		and	ttaad200.tusd = ttams110.ctmp
			and	ttaad200._compnr = 0
			and	ttams110._compnr = 0
			as set with 1 rows
			selectdo
			endselect
			e = set.time.zone(original.time.zone)
			utc.to.local(	i.invoice.date.utc,
					|* Output
					report.invoice.date,
					dummy.time)
			e = set.time.zone(current.time.zone)
		endselect
	else
		utc.to.local(	i.invoice.date.utc,
				|*Output
				report.invoice.date,
				dummy.time)
	endif

	return(report.invoice.date)
}


function get.max.pono.print()
{
	if r.invoice.line = 1 then
		lattr.print = true
	else
		page()
	endif
}


|****************************** END OF REPORT SCRIPT ***************************
